// Code generated by ogen, DO NOT EDIT.

package genapi

// Ref: #/components/schemas/counter
type Counter struct {
	// Ok.
	Count float64 `json:"count"`
}

// GetCount returns the value of Count.
func (s *Counter) GetCount() float64 {
	return s.Count
}

// SetCount sets the value of Count.
func (s *Counter) SetCount(val float64) {
	s.Count = val
}

// Ref: #/components/schemas/increment
type Increment struct {
	// An optional amount to increment by.
	Amount OptInt `json:"amount"`
}

// GetAmount returns the value of Amount.
func (s *Increment) GetAmount() OptInt {
	return s.Amount
}

// SetAmount sets the value of Amount.
func (s *Increment) SetAmount(val OptInt) {
	s.Amount = val
}

// NewOptIncrement returns new OptIncrement with value set to v.
func NewOptIncrement(v Increment) OptIncrement {
	return OptIncrement{
		Value: v,
		Set:   true,
	}
}

// OptIncrement is optional Increment.
type OptIncrement struct {
	Value Increment
	Set   bool
}

// IsSet returns true if OptIncrement was set.
func (o OptIncrement) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIncrement) Reset() {
	var v Increment
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIncrement) SetTo(v Increment) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIncrement) Get() (v Increment, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIncrement) Or(d Increment) Increment {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}
