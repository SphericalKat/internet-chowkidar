// Code generated by ogen, DO NOT EDIT.

package genapi

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			origElem := elem
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "abuse-reports"
				origElem := elem
				if l := len("abuse-reports"); len(elem) >= l && elem[0:l] == "abuse-reports" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleListAbuseReportsRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateAbuseReportRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}

				elem = origElem
			case 'b': // Prefix: "blocks"
				origElem := elem
				if l := len("blocks"); len(elem) >= l && elem[0:l] == "blocks" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleListBlocksRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateBlockRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}

				elem = origElem
			case 'i': // Prefix: "isps"
				origElem := elem
				if l := len("isps"); len(elem) >= l && elem[0:l] == "isps" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleListISPsRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateISPRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}

				elem = origElem
			case 's': // Prefix: "site"
				origElem := elem
				if l := len("site"); len(elem) >= l && elem[0:l] == "site" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '-': // Prefix: "-suggestions"
					origElem := elem
					if l := len("-suggestions"); len(elem) >= l && elem[0:l] == "-suggestions" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleListSiteSuggestionsRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleCreateSiteSuggestionRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}

					elem = origElem
				case 's': // Prefix: "s"
					origElem := elem
					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleListSitesRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleCreateSiteRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [0]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			origElem := elem
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "abuse-reports"
				origElem := elem
				if l := len("abuse-reports"); len(elem) >= l && elem[0:l] == "abuse-reports" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						// Leaf: ListAbuseReports
						r.name = "ListAbuseReports"
						r.summary = "List all abuse reports"
						r.operationID = "listAbuseReports"
						r.pathPattern = "/abuse-reports"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						// Leaf: CreateAbuseReport
						r.name = "CreateAbuseReport"
						r.summary = "Create a new abuse report"
						r.operationID = "createAbuseReport"
						r.pathPattern = "/abuse-reports"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 'b': // Prefix: "blocks"
				origElem := elem
				if l := len("blocks"); len(elem) >= l && elem[0:l] == "blocks" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						// Leaf: ListBlocks
						r.name = "ListBlocks"
						r.summary = "List all blocks"
						r.operationID = "listBlocks"
						r.pathPattern = "/blocks"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						// Leaf: CreateBlock
						r.name = "CreateBlock"
						r.summary = "Create a new block"
						r.operationID = "createBlock"
						r.pathPattern = "/blocks"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 'i': // Prefix: "isps"
				origElem := elem
				if l := len("isps"); len(elem) >= l && elem[0:l] == "isps" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						// Leaf: ListISPs
						r.name = "ListISPs"
						r.summary = "List all ISPs"
						r.operationID = "listISPs"
						r.pathPattern = "/isps"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						// Leaf: CreateISP
						r.name = "CreateISP"
						r.summary = "Create a new ISP"
						r.operationID = "createISP"
						r.pathPattern = "/isps"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 's': // Prefix: "site"
				origElem := elem
				if l := len("site"); len(elem) >= l && elem[0:l] == "site" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '-': // Prefix: "-suggestions"
					origElem := elem
					if l := len("-suggestions"); len(elem) >= l && elem[0:l] == "-suggestions" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: ListSiteSuggestions
							r.name = "ListSiteSuggestions"
							r.summary = "List all site suggestions"
							r.operationID = "listSiteSuggestions"
							r.pathPattern = "/site-suggestions"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							// Leaf: CreateSiteSuggestion
							r.name = "CreateSiteSuggestion"
							r.summary = "Create a new site suggestion"
							r.operationID = "createSiteSuggestion"
							r.pathPattern = "/site-suggestions"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 's': // Prefix: "s"
					origElem := elem
					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: ListSites
							r.name = "ListSites"
							r.summary = "List all sites"
							r.operationID = "listSites"
							r.pathPattern = "/sites"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							// Leaf: CreateSite
							r.name = "CreateSite"
							r.summary = "Create a new site"
							r.operationID = "createSite"
							r.pathPattern = "/sites"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	return r, false
}
