// Code generated by ent, DO NOT EDIT.

package categories

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the categories type in the database.
	Label = "categories"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeSites holds the string denoting the sites edge name in mutations.
	EdgeSites = "sites"
	// EdgeSitesCategories holds the string denoting the sites_categories edge name in mutations.
	EdgeSitesCategories = "sites_categories"
	// Table holds the table name of the categories in the database.
	Table = "categories"
	// SitesTable is the table that holds the sites relation/edge. The primary key declared below.
	SitesTable = "sites_categories"
	// SitesInverseTable is the table name for the Sites entity.
	// It exists in this package in order to avoid circular dependency with the "sites" package.
	SitesInverseTable = "sites"
	// SitesCategoriesTable is the table that holds the sites_categories relation/edge.
	SitesCategoriesTable = "sites_categories"
	// SitesCategoriesInverseTable is the table name for the SitesCategories entity.
	// It exists in this package in order to avoid circular dependency with the "sitescategories" package.
	SitesCategoriesInverseTable = "sites_categories"
	// SitesCategoriesColumn is the table column denoting the sites_categories relation/edge.
	SitesCategoriesColumn = "categories_id"
)

// Columns holds all SQL columns for categories fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
}

var (
	// SitesPrimaryKey and SitesColumn2 are the table columns denoting the
	// primary key for the sites relation (M2M).
	SitesPrimaryKey = []string{"sites_id", "categories_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Categories queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySitesCount orders the results by sites count.
func BySitesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSitesStep(), opts...)
	}
}

// BySites orders the results by sites terms.
func BySites(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSitesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySitesCategoriesCount orders the results by sites_categories count.
func BySitesCategoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSitesCategoriesStep(), opts...)
	}
}

// BySitesCategories orders the results by sites_categories terms.
func BySitesCategories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSitesCategoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSitesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SitesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, SitesTable, SitesPrimaryKey...),
	)
}
func newSitesCategoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SitesCategoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, SitesCategoriesTable, SitesCategoriesColumn),
	)
}
