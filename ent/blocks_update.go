// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gnulinuxindia/internet-chowkidar/ent/blocks"
	"github.com/gnulinuxindia/internet-chowkidar/ent/isps"
	"github.com/gnulinuxindia/internet-chowkidar/ent/predicate"
	"github.com/gnulinuxindia/internet-chowkidar/ent/sites"
)

// BlocksUpdate is the builder for updating Blocks entities.
type BlocksUpdate struct {
	config
	hooks    []Hook
	mutation *BlocksMutation
}

// Where appends a list predicates to the BlocksUpdate builder.
func (bu *BlocksUpdate) Where(ps ...predicate.Blocks) *BlocksUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BlocksUpdate) SetUpdatedAt(t time.Time) *BlocksUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// SetSiteID sets the "site_id" field.
func (bu *BlocksUpdate) SetSiteID(i int) *BlocksUpdate {
	bu.mutation.SetSiteID(i)
	return bu
}

// SetNillableSiteID sets the "site_id" field if the given value is not nil.
func (bu *BlocksUpdate) SetNillableSiteID(i *int) *BlocksUpdate {
	if i != nil {
		bu.SetSiteID(*i)
	}
	return bu
}

// SetIspID sets the "isp_id" field.
func (bu *BlocksUpdate) SetIspID(i int) *BlocksUpdate {
	bu.mutation.SetIspID(i)
	return bu
}

// SetNillableIspID sets the "isp_id" field if the given value is not nil.
func (bu *BlocksUpdate) SetNillableIspID(i *int) *BlocksUpdate {
	if i != nil {
		bu.SetIspID(*i)
	}
	return bu
}

// SetBlockReports sets the "block_reports" field.
func (bu *BlocksUpdate) SetBlockReports(i int) *BlocksUpdate {
	bu.mutation.ResetBlockReports()
	bu.mutation.SetBlockReports(i)
	return bu
}

// SetNillableBlockReports sets the "block_reports" field if the given value is not nil.
func (bu *BlocksUpdate) SetNillableBlockReports(i *int) *BlocksUpdate {
	if i != nil {
		bu.SetBlockReports(*i)
	}
	return bu
}

// AddBlockReports adds i to the "block_reports" field.
func (bu *BlocksUpdate) AddBlockReports(i int) *BlocksUpdate {
	bu.mutation.AddBlockReports(i)
	return bu
}

// SetUnblockReports sets the "unblock_reports" field.
func (bu *BlocksUpdate) SetUnblockReports(i int) *BlocksUpdate {
	bu.mutation.ResetUnblockReports()
	bu.mutation.SetUnblockReports(i)
	return bu
}

// SetNillableUnblockReports sets the "unblock_reports" field if the given value is not nil.
func (bu *BlocksUpdate) SetNillableUnblockReports(i *int) *BlocksUpdate {
	if i != nil {
		bu.SetUnblockReports(*i)
	}
	return bu
}

// AddUnblockReports adds i to the "unblock_reports" field.
func (bu *BlocksUpdate) AddUnblockReports(i int) *BlocksUpdate {
	bu.mutation.AddUnblockReports(i)
	return bu
}

// SetLastReportedAt sets the "last_reported_at" field.
func (bu *BlocksUpdate) SetLastReportedAt(t time.Time) *BlocksUpdate {
	bu.mutation.SetLastReportedAt(t)
	return bu
}

// SetNillableLastReportedAt sets the "last_reported_at" field if the given value is not nil.
func (bu *BlocksUpdate) SetNillableLastReportedAt(t *time.Time) *BlocksUpdate {
	if t != nil {
		bu.SetLastReportedAt(*t)
	}
	return bu
}

// SetSite sets the "site" edge to the Sites entity.
func (bu *BlocksUpdate) SetSite(s *Sites) *BlocksUpdate {
	return bu.SetSiteID(s.ID)
}

// SetIsp sets the "isp" edge to the Isps entity.
func (bu *BlocksUpdate) SetIsp(i *Isps) *BlocksUpdate {
	return bu.SetIspID(i.ID)
}

// Mutation returns the BlocksMutation object of the builder.
func (bu *BlocksUpdate) Mutation() *BlocksMutation {
	return bu.mutation
}

// ClearSite clears the "site" edge to the Sites entity.
func (bu *BlocksUpdate) ClearSite() *BlocksUpdate {
	bu.mutation.ClearSite()
	return bu
}

// ClearIsp clears the "isp" edge to the Isps entity.
func (bu *BlocksUpdate) ClearIsp() *BlocksUpdate {
	bu.mutation.ClearIsp()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BlocksUpdate) Save(ctx context.Context) (int, error) {
	bu.defaults()
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BlocksUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BlocksUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BlocksUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BlocksUpdate) defaults() {
	if _, ok := bu.mutation.UpdatedAt(); !ok {
		v := blocks.UpdateDefaultUpdatedAt()
		bu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BlocksUpdate) check() error {
	if _, ok := bu.mutation.SiteID(); bu.mutation.SiteCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Blocks.site"`)
	}
	if _, ok := bu.mutation.IspID(); bu.mutation.IspCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Blocks.isp"`)
	}
	return nil
}

func (bu *BlocksUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(blocks.Table, blocks.Columns, sqlgraph.NewFieldSpec(blocks.FieldID, field.TypeInt))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(blocks.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.BlockReports(); ok {
		_spec.SetField(blocks.FieldBlockReports, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedBlockReports(); ok {
		_spec.AddField(blocks.FieldBlockReports, field.TypeInt, value)
	}
	if value, ok := bu.mutation.UnblockReports(); ok {
		_spec.SetField(blocks.FieldUnblockReports, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedUnblockReports(); ok {
		_spec.AddField(blocks.FieldUnblockReports, field.TypeInt, value)
	}
	if value, ok := bu.mutation.LastReportedAt(); ok {
		_spec.SetField(blocks.FieldLastReportedAt, field.TypeTime, value)
	}
	if bu.mutation.SiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blocks.SiteTable,
			Columns: []string{blocks.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sites.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blocks.SiteTable,
			Columns: []string{blocks.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sites.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.IspCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blocks.IspTable,
			Columns: []string{blocks.IspColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(isps.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.IspIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blocks.IspTable,
			Columns: []string{blocks.IspColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(isps.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blocks.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BlocksUpdateOne is the builder for updating a single Blocks entity.
type BlocksUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlocksMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BlocksUpdateOne) SetUpdatedAt(t time.Time) *BlocksUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// SetSiteID sets the "site_id" field.
func (buo *BlocksUpdateOne) SetSiteID(i int) *BlocksUpdateOne {
	buo.mutation.SetSiteID(i)
	return buo
}

// SetNillableSiteID sets the "site_id" field if the given value is not nil.
func (buo *BlocksUpdateOne) SetNillableSiteID(i *int) *BlocksUpdateOne {
	if i != nil {
		buo.SetSiteID(*i)
	}
	return buo
}

// SetIspID sets the "isp_id" field.
func (buo *BlocksUpdateOne) SetIspID(i int) *BlocksUpdateOne {
	buo.mutation.SetIspID(i)
	return buo
}

// SetNillableIspID sets the "isp_id" field if the given value is not nil.
func (buo *BlocksUpdateOne) SetNillableIspID(i *int) *BlocksUpdateOne {
	if i != nil {
		buo.SetIspID(*i)
	}
	return buo
}

// SetBlockReports sets the "block_reports" field.
func (buo *BlocksUpdateOne) SetBlockReports(i int) *BlocksUpdateOne {
	buo.mutation.ResetBlockReports()
	buo.mutation.SetBlockReports(i)
	return buo
}

// SetNillableBlockReports sets the "block_reports" field if the given value is not nil.
func (buo *BlocksUpdateOne) SetNillableBlockReports(i *int) *BlocksUpdateOne {
	if i != nil {
		buo.SetBlockReports(*i)
	}
	return buo
}

// AddBlockReports adds i to the "block_reports" field.
func (buo *BlocksUpdateOne) AddBlockReports(i int) *BlocksUpdateOne {
	buo.mutation.AddBlockReports(i)
	return buo
}

// SetUnblockReports sets the "unblock_reports" field.
func (buo *BlocksUpdateOne) SetUnblockReports(i int) *BlocksUpdateOne {
	buo.mutation.ResetUnblockReports()
	buo.mutation.SetUnblockReports(i)
	return buo
}

// SetNillableUnblockReports sets the "unblock_reports" field if the given value is not nil.
func (buo *BlocksUpdateOne) SetNillableUnblockReports(i *int) *BlocksUpdateOne {
	if i != nil {
		buo.SetUnblockReports(*i)
	}
	return buo
}

// AddUnblockReports adds i to the "unblock_reports" field.
func (buo *BlocksUpdateOne) AddUnblockReports(i int) *BlocksUpdateOne {
	buo.mutation.AddUnblockReports(i)
	return buo
}

// SetLastReportedAt sets the "last_reported_at" field.
func (buo *BlocksUpdateOne) SetLastReportedAt(t time.Time) *BlocksUpdateOne {
	buo.mutation.SetLastReportedAt(t)
	return buo
}

// SetNillableLastReportedAt sets the "last_reported_at" field if the given value is not nil.
func (buo *BlocksUpdateOne) SetNillableLastReportedAt(t *time.Time) *BlocksUpdateOne {
	if t != nil {
		buo.SetLastReportedAt(*t)
	}
	return buo
}

// SetSite sets the "site" edge to the Sites entity.
func (buo *BlocksUpdateOne) SetSite(s *Sites) *BlocksUpdateOne {
	return buo.SetSiteID(s.ID)
}

// SetIsp sets the "isp" edge to the Isps entity.
func (buo *BlocksUpdateOne) SetIsp(i *Isps) *BlocksUpdateOne {
	return buo.SetIspID(i.ID)
}

// Mutation returns the BlocksMutation object of the builder.
func (buo *BlocksUpdateOne) Mutation() *BlocksMutation {
	return buo.mutation
}

// ClearSite clears the "site" edge to the Sites entity.
func (buo *BlocksUpdateOne) ClearSite() *BlocksUpdateOne {
	buo.mutation.ClearSite()
	return buo
}

// ClearIsp clears the "isp" edge to the Isps entity.
func (buo *BlocksUpdateOne) ClearIsp() *BlocksUpdateOne {
	buo.mutation.ClearIsp()
	return buo
}

// Where appends a list predicates to the BlocksUpdate builder.
func (buo *BlocksUpdateOne) Where(ps ...predicate.Blocks) *BlocksUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BlocksUpdateOne) Select(field string, fields ...string) *BlocksUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Blocks entity.
func (buo *BlocksUpdateOne) Save(ctx context.Context) (*Blocks, error) {
	buo.defaults()
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BlocksUpdateOne) SaveX(ctx context.Context) *Blocks {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BlocksUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BlocksUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BlocksUpdateOne) defaults() {
	if _, ok := buo.mutation.UpdatedAt(); !ok {
		v := blocks.UpdateDefaultUpdatedAt()
		buo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BlocksUpdateOne) check() error {
	if _, ok := buo.mutation.SiteID(); buo.mutation.SiteCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Blocks.site"`)
	}
	if _, ok := buo.mutation.IspID(); buo.mutation.IspCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Blocks.isp"`)
	}
	return nil
}

func (buo *BlocksUpdateOne) sqlSave(ctx context.Context) (_node *Blocks, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blocks.Table, blocks.Columns, sqlgraph.NewFieldSpec(blocks.FieldID, field.TypeInt))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Blocks.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blocks.FieldID)
		for _, f := range fields {
			if !blocks.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blocks.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(blocks.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.BlockReports(); ok {
		_spec.SetField(blocks.FieldBlockReports, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedBlockReports(); ok {
		_spec.AddField(blocks.FieldBlockReports, field.TypeInt, value)
	}
	if value, ok := buo.mutation.UnblockReports(); ok {
		_spec.SetField(blocks.FieldUnblockReports, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedUnblockReports(); ok {
		_spec.AddField(blocks.FieldUnblockReports, field.TypeInt, value)
	}
	if value, ok := buo.mutation.LastReportedAt(); ok {
		_spec.SetField(blocks.FieldLastReportedAt, field.TypeTime, value)
	}
	if buo.mutation.SiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blocks.SiteTable,
			Columns: []string{blocks.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sites.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blocks.SiteTable,
			Columns: []string{blocks.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sites.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.IspCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blocks.IspTable,
			Columns: []string{blocks.IspColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(isps.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.IspIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blocks.IspTable,
			Columns: []string{blocks.IspColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(isps.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Blocks{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blocks.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
