// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gnulinuxindia/internet-chowkidar/ent/categories"
	"github.com/gnulinuxindia/internet-chowkidar/ent/predicate"
	"github.com/gnulinuxindia/internet-chowkidar/ent/sites"
	"github.com/gnulinuxindia/internet-chowkidar/ent/sitescategories"
)

// CategoriesUpdate is the builder for updating Categories entities.
type CategoriesUpdate struct {
	config
	hooks    []Hook
	mutation *CategoriesMutation
}

// Where appends a list predicates to the CategoriesUpdate builder.
func (cu *CategoriesUpdate) Where(ps ...predicate.Categories) *CategoriesUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CategoriesUpdate) SetUpdatedAt(t time.Time) *CategoriesUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetName sets the "name" field.
func (cu *CategoriesUpdate) SetName(s string) *CategoriesUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CategoriesUpdate) SetNillableName(s *string) *CategoriesUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// AddSiteIDs adds the "sites" edge to the Sites entity by IDs.
func (cu *CategoriesUpdate) AddSiteIDs(ids ...int) *CategoriesUpdate {
	cu.mutation.AddSiteIDs(ids...)
	return cu
}

// AddSites adds the "sites" edges to the Sites entity.
func (cu *CategoriesUpdate) AddSites(s ...*Sites) *CategoriesUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.AddSiteIDs(ids...)
}

// AddSitesCategoryIDs adds the "sites_categories" edge to the SitesCategories entity by IDs.
func (cu *CategoriesUpdate) AddSitesCategoryIDs(ids ...int) *CategoriesUpdate {
	cu.mutation.AddSitesCategoryIDs(ids...)
	return cu
}

// AddSitesCategories adds the "sites_categories" edges to the SitesCategories entity.
func (cu *CategoriesUpdate) AddSitesCategories(s ...*SitesCategories) *CategoriesUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.AddSitesCategoryIDs(ids...)
}

// Mutation returns the CategoriesMutation object of the builder.
func (cu *CategoriesUpdate) Mutation() *CategoriesMutation {
	return cu.mutation
}

// ClearSites clears all "sites" edges to the Sites entity.
func (cu *CategoriesUpdate) ClearSites() *CategoriesUpdate {
	cu.mutation.ClearSites()
	return cu
}

// RemoveSiteIDs removes the "sites" edge to Sites entities by IDs.
func (cu *CategoriesUpdate) RemoveSiteIDs(ids ...int) *CategoriesUpdate {
	cu.mutation.RemoveSiteIDs(ids...)
	return cu
}

// RemoveSites removes "sites" edges to Sites entities.
func (cu *CategoriesUpdate) RemoveSites(s ...*Sites) *CategoriesUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.RemoveSiteIDs(ids...)
}

// ClearSitesCategories clears all "sites_categories" edges to the SitesCategories entity.
func (cu *CategoriesUpdate) ClearSitesCategories() *CategoriesUpdate {
	cu.mutation.ClearSitesCategories()
	return cu
}

// RemoveSitesCategoryIDs removes the "sites_categories" edge to SitesCategories entities by IDs.
func (cu *CategoriesUpdate) RemoveSitesCategoryIDs(ids ...int) *CategoriesUpdate {
	cu.mutation.RemoveSitesCategoryIDs(ids...)
	return cu
}

// RemoveSitesCategories removes "sites_categories" edges to SitesCategories entities.
func (cu *CategoriesUpdate) RemoveSitesCategories(s ...*SitesCategories) *CategoriesUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.RemoveSitesCategoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CategoriesUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CategoriesUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CategoriesUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CategoriesUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CategoriesUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := categories.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

func (cu *CategoriesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(categories.Table, categories.Columns, sqlgraph.NewFieldSpec(categories.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(categories.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(categories.FieldName, field.TypeString, value)
	}
	if cu.mutation.SitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   categories.SitesTable,
			Columns: categories.SitesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sites.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedSitesIDs(); len(nodes) > 0 && !cu.mutation.SitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   categories.SitesTable,
			Columns: categories.SitesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sites.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.SitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   categories.SitesTable,
			Columns: categories.SitesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sites.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.SitesCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   categories.SitesCategoriesTable,
			Columns: []string{categories.SitesCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sitescategories.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedSitesCategoriesIDs(); len(nodes) > 0 && !cu.mutation.SitesCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   categories.SitesCategoriesTable,
			Columns: []string{categories.SitesCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sitescategories.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.SitesCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   categories.SitesCategoriesTable,
			Columns: []string{categories.SitesCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sitescategories.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{categories.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CategoriesUpdateOne is the builder for updating a single Categories entity.
type CategoriesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CategoriesMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CategoriesUpdateOne) SetUpdatedAt(t time.Time) *CategoriesUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetName sets the "name" field.
func (cuo *CategoriesUpdateOne) SetName(s string) *CategoriesUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CategoriesUpdateOne) SetNillableName(s *string) *CategoriesUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// AddSiteIDs adds the "sites" edge to the Sites entity by IDs.
func (cuo *CategoriesUpdateOne) AddSiteIDs(ids ...int) *CategoriesUpdateOne {
	cuo.mutation.AddSiteIDs(ids...)
	return cuo
}

// AddSites adds the "sites" edges to the Sites entity.
func (cuo *CategoriesUpdateOne) AddSites(s ...*Sites) *CategoriesUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.AddSiteIDs(ids...)
}

// AddSitesCategoryIDs adds the "sites_categories" edge to the SitesCategories entity by IDs.
func (cuo *CategoriesUpdateOne) AddSitesCategoryIDs(ids ...int) *CategoriesUpdateOne {
	cuo.mutation.AddSitesCategoryIDs(ids...)
	return cuo
}

// AddSitesCategories adds the "sites_categories" edges to the SitesCategories entity.
func (cuo *CategoriesUpdateOne) AddSitesCategories(s ...*SitesCategories) *CategoriesUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.AddSitesCategoryIDs(ids...)
}

// Mutation returns the CategoriesMutation object of the builder.
func (cuo *CategoriesUpdateOne) Mutation() *CategoriesMutation {
	return cuo.mutation
}

// ClearSites clears all "sites" edges to the Sites entity.
func (cuo *CategoriesUpdateOne) ClearSites() *CategoriesUpdateOne {
	cuo.mutation.ClearSites()
	return cuo
}

// RemoveSiteIDs removes the "sites" edge to Sites entities by IDs.
func (cuo *CategoriesUpdateOne) RemoveSiteIDs(ids ...int) *CategoriesUpdateOne {
	cuo.mutation.RemoveSiteIDs(ids...)
	return cuo
}

// RemoveSites removes "sites" edges to Sites entities.
func (cuo *CategoriesUpdateOne) RemoveSites(s ...*Sites) *CategoriesUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.RemoveSiteIDs(ids...)
}

// ClearSitesCategories clears all "sites_categories" edges to the SitesCategories entity.
func (cuo *CategoriesUpdateOne) ClearSitesCategories() *CategoriesUpdateOne {
	cuo.mutation.ClearSitesCategories()
	return cuo
}

// RemoveSitesCategoryIDs removes the "sites_categories" edge to SitesCategories entities by IDs.
func (cuo *CategoriesUpdateOne) RemoveSitesCategoryIDs(ids ...int) *CategoriesUpdateOne {
	cuo.mutation.RemoveSitesCategoryIDs(ids...)
	return cuo
}

// RemoveSitesCategories removes "sites_categories" edges to SitesCategories entities.
func (cuo *CategoriesUpdateOne) RemoveSitesCategories(s ...*SitesCategories) *CategoriesUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.RemoveSitesCategoryIDs(ids...)
}

// Where appends a list predicates to the CategoriesUpdate builder.
func (cuo *CategoriesUpdateOne) Where(ps ...predicate.Categories) *CategoriesUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CategoriesUpdateOne) Select(field string, fields ...string) *CategoriesUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Categories entity.
func (cuo *CategoriesUpdateOne) Save(ctx context.Context) (*Categories, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CategoriesUpdateOne) SaveX(ctx context.Context) *Categories {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CategoriesUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CategoriesUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CategoriesUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := categories.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

func (cuo *CategoriesUpdateOne) sqlSave(ctx context.Context) (_node *Categories, err error) {
	_spec := sqlgraph.NewUpdateSpec(categories.Table, categories.Columns, sqlgraph.NewFieldSpec(categories.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Categories.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, categories.FieldID)
		for _, f := range fields {
			if !categories.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != categories.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(categories.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(categories.FieldName, field.TypeString, value)
	}
	if cuo.mutation.SitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   categories.SitesTable,
			Columns: categories.SitesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sites.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedSitesIDs(); len(nodes) > 0 && !cuo.mutation.SitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   categories.SitesTable,
			Columns: categories.SitesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sites.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.SitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   categories.SitesTable,
			Columns: categories.SitesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sites.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.SitesCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   categories.SitesCategoriesTable,
			Columns: []string{categories.SitesCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sitescategories.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedSitesCategoriesIDs(); len(nodes) > 0 && !cuo.mutation.SitesCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   categories.SitesCategoriesTable,
			Columns: []string{categories.SitesCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sitescategories.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.SitesCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   categories.SitesCategoriesTable,
			Columns: []string{categories.SitesCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sitescategories.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Categories{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{categories.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
