// Code generated by ent, DO NOT EDIT.

package sitescategories

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gnulinuxindia/internet-chowkidar/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SitesCategories {
	return predicate.SitesCategories(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SitesCategories {
	return predicate.SitesCategories(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SitesCategories {
	return predicate.SitesCategories(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SitesCategories {
	return predicate.SitesCategories(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SitesCategories {
	return predicate.SitesCategories(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SitesCategories {
	return predicate.SitesCategories(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SitesCategories {
	return predicate.SitesCategories(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SitesCategories {
	return predicate.SitesCategories(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SitesCategories {
	return predicate.SitesCategories(sql.FieldLTE(FieldID, id))
}

// SitesID applies equality check predicate on the "sites_id" field. It's identical to SitesIDEQ.
func SitesID(v int) predicate.SitesCategories {
	return predicate.SitesCategories(sql.FieldEQ(FieldSitesID, v))
}

// CategoriesID applies equality check predicate on the "categories_id" field. It's identical to CategoriesIDEQ.
func CategoriesID(v int) predicate.SitesCategories {
	return predicate.SitesCategories(sql.FieldEQ(FieldCategoriesID, v))
}

// SitesIDEQ applies the EQ predicate on the "sites_id" field.
func SitesIDEQ(v int) predicate.SitesCategories {
	return predicate.SitesCategories(sql.FieldEQ(FieldSitesID, v))
}

// SitesIDNEQ applies the NEQ predicate on the "sites_id" field.
func SitesIDNEQ(v int) predicate.SitesCategories {
	return predicate.SitesCategories(sql.FieldNEQ(FieldSitesID, v))
}

// SitesIDIn applies the In predicate on the "sites_id" field.
func SitesIDIn(vs ...int) predicate.SitesCategories {
	return predicate.SitesCategories(sql.FieldIn(FieldSitesID, vs...))
}

// SitesIDNotIn applies the NotIn predicate on the "sites_id" field.
func SitesIDNotIn(vs ...int) predicate.SitesCategories {
	return predicate.SitesCategories(sql.FieldNotIn(FieldSitesID, vs...))
}

// CategoriesIDEQ applies the EQ predicate on the "categories_id" field.
func CategoriesIDEQ(v int) predicate.SitesCategories {
	return predicate.SitesCategories(sql.FieldEQ(FieldCategoriesID, v))
}

// CategoriesIDNEQ applies the NEQ predicate on the "categories_id" field.
func CategoriesIDNEQ(v int) predicate.SitesCategories {
	return predicate.SitesCategories(sql.FieldNEQ(FieldCategoriesID, v))
}

// CategoriesIDIn applies the In predicate on the "categories_id" field.
func CategoriesIDIn(vs ...int) predicate.SitesCategories {
	return predicate.SitesCategories(sql.FieldIn(FieldCategoriesID, vs...))
}

// CategoriesIDNotIn applies the NotIn predicate on the "categories_id" field.
func CategoriesIDNotIn(vs ...int) predicate.SitesCategories {
	return predicate.SitesCategories(sql.FieldNotIn(FieldCategoriesID, vs...))
}

// HasSites applies the HasEdge predicate on the "sites" edge.
func HasSites() predicate.SitesCategories {
	return predicate.SitesCategories(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SitesTable, SitesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSitesWith applies the HasEdge predicate on the "sites" edge with a given conditions (other predicates).
func HasSitesWith(preds ...predicate.Sites) predicate.SitesCategories {
	return predicate.SitesCategories(func(s *sql.Selector) {
		step := newSitesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCategories applies the HasEdge predicate on the "categories" edge.
func HasCategories() predicate.SitesCategories {
	return predicate.SitesCategories(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CategoriesTable, CategoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCategoriesWith applies the HasEdge predicate on the "categories" edge with a given conditions (other predicates).
func HasCategoriesWith(preds ...predicate.Categories) predicate.SitesCategories {
	return predicate.SitesCategories(func(s *sql.Selector) {
		step := newCategoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SitesCategories) predicate.SitesCategories {
	return predicate.SitesCategories(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SitesCategories) predicate.SitesCategories {
	return predicate.SitesCategories(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SitesCategories) predicate.SitesCategories {
	return predicate.SitesCategories(sql.NotPredicates(p))
}
