// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gnulinuxindia/internet-chowkidar/ent/categories"
	"github.com/gnulinuxindia/internet-chowkidar/ent/predicate"
	"github.com/gnulinuxindia/internet-chowkidar/ent/sites"
	"github.com/gnulinuxindia/internet-chowkidar/ent/sitescategories"
)

// SitesCategoriesUpdate is the builder for updating SitesCategories entities.
type SitesCategoriesUpdate struct {
	config
	hooks    []Hook
	mutation *SitesCategoriesMutation
}

// Where appends a list predicates to the SitesCategoriesUpdate builder.
func (scu *SitesCategoriesUpdate) Where(ps ...predicate.SitesCategories) *SitesCategoriesUpdate {
	scu.mutation.Where(ps...)
	return scu
}

// SetSitesID sets the "sites_id" field.
func (scu *SitesCategoriesUpdate) SetSitesID(i int) *SitesCategoriesUpdate {
	scu.mutation.SetSitesID(i)
	return scu
}

// SetNillableSitesID sets the "sites_id" field if the given value is not nil.
func (scu *SitesCategoriesUpdate) SetNillableSitesID(i *int) *SitesCategoriesUpdate {
	if i != nil {
		scu.SetSitesID(*i)
	}
	return scu
}

// SetCategoriesID sets the "categories_id" field.
func (scu *SitesCategoriesUpdate) SetCategoriesID(i int) *SitesCategoriesUpdate {
	scu.mutation.SetCategoriesID(i)
	return scu
}

// SetNillableCategoriesID sets the "categories_id" field if the given value is not nil.
func (scu *SitesCategoriesUpdate) SetNillableCategoriesID(i *int) *SitesCategoriesUpdate {
	if i != nil {
		scu.SetCategoriesID(*i)
	}
	return scu
}

// SetSites sets the "sites" edge to the Sites entity.
func (scu *SitesCategoriesUpdate) SetSites(s *Sites) *SitesCategoriesUpdate {
	return scu.SetSitesID(s.ID)
}

// SetCategories sets the "categories" edge to the Categories entity.
func (scu *SitesCategoriesUpdate) SetCategories(c *Categories) *SitesCategoriesUpdate {
	return scu.SetCategoriesID(c.ID)
}

// Mutation returns the SitesCategoriesMutation object of the builder.
func (scu *SitesCategoriesUpdate) Mutation() *SitesCategoriesMutation {
	return scu.mutation
}

// ClearSites clears the "sites" edge to the Sites entity.
func (scu *SitesCategoriesUpdate) ClearSites() *SitesCategoriesUpdate {
	scu.mutation.ClearSites()
	return scu
}

// ClearCategories clears the "categories" edge to the Categories entity.
func (scu *SitesCategoriesUpdate) ClearCategories() *SitesCategoriesUpdate {
	scu.mutation.ClearCategories()
	return scu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *SitesCategoriesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, scu.sqlSave, scu.mutation, scu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scu *SitesCategoriesUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *SitesCategoriesUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *SitesCategoriesUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scu *SitesCategoriesUpdate) check() error {
	if _, ok := scu.mutation.SitesID(); scu.mutation.SitesCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SitesCategories.sites"`)
	}
	if _, ok := scu.mutation.CategoriesID(); scu.mutation.CategoriesCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SitesCategories.categories"`)
	}
	return nil
}

func (scu *SitesCategoriesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := scu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sitescategories.Table, sitescategories.Columns, sqlgraph.NewFieldSpec(sitescategories.FieldID, field.TypeInt))
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if scu.mutation.SitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sitescategories.SitesTable,
			Columns: []string{sitescategories.SitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sites.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.SitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sitescategories.SitesTable,
			Columns: []string{sitescategories.SitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sites.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scu.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sitescategories.CategoriesTable,
			Columns: []string{sitescategories.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(categories.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sitescategories.CategoriesTable,
			Columns: []string{sitescategories.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(categories.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sitescategories.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scu.mutation.done = true
	return n, nil
}

// SitesCategoriesUpdateOne is the builder for updating a single SitesCategories entity.
type SitesCategoriesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SitesCategoriesMutation
}

// SetSitesID sets the "sites_id" field.
func (scuo *SitesCategoriesUpdateOne) SetSitesID(i int) *SitesCategoriesUpdateOne {
	scuo.mutation.SetSitesID(i)
	return scuo
}

// SetNillableSitesID sets the "sites_id" field if the given value is not nil.
func (scuo *SitesCategoriesUpdateOne) SetNillableSitesID(i *int) *SitesCategoriesUpdateOne {
	if i != nil {
		scuo.SetSitesID(*i)
	}
	return scuo
}

// SetCategoriesID sets the "categories_id" field.
func (scuo *SitesCategoriesUpdateOne) SetCategoriesID(i int) *SitesCategoriesUpdateOne {
	scuo.mutation.SetCategoriesID(i)
	return scuo
}

// SetNillableCategoriesID sets the "categories_id" field if the given value is not nil.
func (scuo *SitesCategoriesUpdateOne) SetNillableCategoriesID(i *int) *SitesCategoriesUpdateOne {
	if i != nil {
		scuo.SetCategoriesID(*i)
	}
	return scuo
}

// SetSites sets the "sites" edge to the Sites entity.
func (scuo *SitesCategoriesUpdateOne) SetSites(s *Sites) *SitesCategoriesUpdateOne {
	return scuo.SetSitesID(s.ID)
}

// SetCategories sets the "categories" edge to the Categories entity.
func (scuo *SitesCategoriesUpdateOne) SetCategories(c *Categories) *SitesCategoriesUpdateOne {
	return scuo.SetCategoriesID(c.ID)
}

// Mutation returns the SitesCategoriesMutation object of the builder.
func (scuo *SitesCategoriesUpdateOne) Mutation() *SitesCategoriesMutation {
	return scuo.mutation
}

// ClearSites clears the "sites" edge to the Sites entity.
func (scuo *SitesCategoriesUpdateOne) ClearSites() *SitesCategoriesUpdateOne {
	scuo.mutation.ClearSites()
	return scuo
}

// ClearCategories clears the "categories" edge to the Categories entity.
func (scuo *SitesCategoriesUpdateOne) ClearCategories() *SitesCategoriesUpdateOne {
	scuo.mutation.ClearCategories()
	return scuo
}

// Where appends a list predicates to the SitesCategoriesUpdate builder.
func (scuo *SitesCategoriesUpdateOne) Where(ps ...predicate.SitesCategories) *SitesCategoriesUpdateOne {
	scuo.mutation.Where(ps...)
	return scuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scuo *SitesCategoriesUpdateOne) Select(field string, fields ...string) *SitesCategoriesUpdateOne {
	scuo.fields = append([]string{field}, fields...)
	return scuo
}

// Save executes the query and returns the updated SitesCategories entity.
func (scuo *SitesCategoriesUpdateOne) Save(ctx context.Context) (*SitesCategories, error) {
	return withHooks(ctx, scuo.sqlSave, scuo.mutation, scuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *SitesCategoriesUpdateOne) SaveX(ctx context.Context) *SitesCategories {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *SitesCategoriesUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *SitesCategoriesUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scuo *SitesCategoriesUpdateOne) check() error {
	if _, ok := scuo.mutation.SitesID(); scuo.mutation.SitesCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SitesCategories.sites"`)
	}
	if _, ok := scuo.mutation.CategoriesID(); scuo.mutation.CategoriesCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SitesCategories.categories"`)
	}
	return nil
}

func (scuo *SitesCategoriesUpdateOne) sqlSave(ctx context.Context) (_node *SitesCategories, err error) {
	if err := scuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sitescategories.Table, sitescategories.Columns, sqlgraph.NewFieldSpec(sitescategories.FieldID, field.TypeInt))
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SitesCategories.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sitescategories.FieldID)
		for _, f := range fields {
			if !sitescategories.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sitescategories.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if scuo.mutation.SitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sitescategories.SitesTable,
			Columns: []string{sitescategories.SitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sites.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.SitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sitescategories.SitesTable,
			Columns: []string{sitescategories.SitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sites.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scuo.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sitescategories.CategoriesTable,
			Columns: []string{sitescategories.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(categories.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sitescategories.CategoriesTable,
			Columns: []string{sitescategories.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(categories.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SitesCategories{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sitescategories.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scuo.mutation.done = true
	return _node, nil
}
